---
- local_action: command hostname
  register: hst
  run_once: true
  tags: [patroni_install]

- name: Notify SysLog | {{ playbook_dir | basename }} role={{ role_name }} inventory={{ inventory_file }} tag={{ ansible_run_tags }}
  shell: logger -t {{ hst.stdout }} "ansible playbook started  {{ playbook_dir }} role={{ role_name }} inventory={{ inventory_file }} tag={{ ansible_run_tags }}"
  tags: [patroni_install]

- name: install sudo
  package: name=sudo state=present
  when: (ansible_distribution == 'ALT Server' or ansible_distribution == 'Altlinux')
  tags: [patroni_install]

- name: install python3
  package: name=python3 state=present
  tags: [patroni_install]

- name: install python3-module-netaddr
  package: name=python3-module-netaddr state=present
  tags: [patroni_install]

- name: install python3-module-pip
  package: name=python3-module-pip state=present
  tags: [patroni_install]

- name: install jq
  package: name=jq state=present
  tags: [patroni_install]

- name: add rule to sudoers
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^postgres ALL=(root) NOPASSWD: /usr/bin/ip address add*'
    line: "postgres ALL=(root) NOPASSWD: /usr/bin/ip address add {{ patroni_cluster_ip }}/{{ (hostvars[inventory_hostname].ansible_set_ip+'/'+ansible_default_ipv4.netmask) | ipaddr('prefix') }} dev {{ ansible_default_ipv4.interface }}"
    validate: 'visudo -cf %s'
  tags: [patroni_install]

- name: add rule to sudoers
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^postgres ALL=(root) NOPASSWD: /usr/bin/ip address delete*'
    line: "postgres ALL=(root) NOPASSWD: /usr/bin/ip address delete {{ patroni_cluster_ip }}/{{ (hostvars[inventory_hostname].ansible_set_ip+'/'+ansible_default_ipv4.netmask) | ipaddr('prefix') }} dev {{ ansible_default_ipv4.interface }}"
    validate: 'visudo -cf %s'
  tags: [patroni_install]

- name: add rule to sudoers
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^postgres ALL=(root) NOPASSWD: /usr/bin/ip -s neigh flush all'
    line: "postgres ALL=(root) NOPASSWD: /usr/bin/ip -s neigh flush all"
    validate: 'visudo -cf %s'
  tags: [patroni_install]

- name: add rule to sudoers
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^postgres ALL=(root) NOPASSWD: /usr/sbin/arping -A -c 5 -I*'
    line: "postgres ALL=(root) NOPASSWD: /usr/sbin/arping -A -c 5 -I {{ ansible_default_ipv4.interface }} {{ patroni_cluster_ip }}"
    validate: 'visudo -cf %s'
  tags: [patroni_install]

- name: add rule to sudoers
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^postgres ALL=(root) NOPASSWD: /usr/bin/systemctl restart pgagent'
    line: "postgres ALL=(root) NOPASSWD: /usr/bin/systemctl restart pgagent"
    validate: 'visudo -cf %s'
  when: install_pgagent == true
  tags: [patroni_install]

- name: add rule to sudoers
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^postgres ALL=(root) NOPASSWD: /usr/bin/systemctl stop pgagent'
    line: "postgres ALL=(root) NOPASSWD: /usr/bin/systemctl stop pgagent"
    validate: 'visudo -cf %s'
  when: install_pgagent == true
  tags: [patroni_install]

- name: add rule to sudoers
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^postgres ALL=(root) NOPASSWD: /usr/bin/systemctl restart pgpool'
    line: "postgres ALL=(root) NOPASSWD: /usr/bin/systemctl restart pgpool"
    validate: 'visudo -cf %s'
  when: install_pgpool == true and postgresql_version|int < 14
  tags: [patroni_install]

- name: add rule to sudoers
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^postgres ALL=(root) NOPASSWD: /usr/bin/systemctl restart pgpool'
    line: "postgres ALL=(root) NOPASSWD: /usr/bin/systemctl restart pgpool"
    validate: 'visudo -cf %s'
  when: install_pgpool == true and postgresql_version|int >= 14
  tags: [patroni_install]

- name: add rule to sudoers
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^postgres ALL=(root) NOPASSWD: /usr/bin/systemctl stop pgpool'
    line: "postgres ALL=(root) NOPASSWD: /usr/bin/systemctl stop pgpool"
    validate: 'visudo -cf %s'
  when: install_pgpool == true and postgresql_version|int < 14
  tags: [patroni_install]

- name: add rule to sudoers
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^postgres ALL=(root) NOPASSWD: /usr/bin/systemctl stop pgpool'
    line: "postgres ALL=(root) NOPASSWD: /usr/bin/systemctl stop pgpool"
    validate: 'visudo -cf %s'
  when: install_pgpool == true and postgresql_version|int >= 14
  tags: [patroni_install]

- name: add rule to sudoers
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^postgres ALL=(root) NOPASSWD: /usr/bin/systemctl restart pgbouncer'
    line: "postgres ALL=(root) NOPASSWD: /usr/bin/systemctl restart pgbouncer"
    validate: 'visudo -cf %s'
  when: install_pgbouncer == true
  tags: [patroni_install]

- name: add rule to sudoers
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^postgres ALL=(root) NOPASSWD: /usr/bin/systemctl kill pgbouncer'
    line: "postgres ALL=(root) NOPASSWD: /usr/bin/systemctl kill pgbouncer"
    validate: 'visudo -cf %s'
  when: install_pgbouncer == true
  tags: [patroni_install]

- name: add comment to sudoers
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^# how testing: sudo -iu postgres sudo /usr/bin/ip -s neigh flush all'
    line: '# how testing: sudo -iu postgres sudo /usr/bin/ip -s neigh flush all'
    validate: 'visudo -cf %s'
  tags: [patroni_install]

- name: add alias pip3 to .bashrc
  lineinfile:
    path: ~/.bashrc
    line: alias pip3='python3 -m pip "$@"'
    state: present
    create: yes
  tags: [patroni_install]

####################################################################################

- name: patroni installation (psycopg2)
  block:

  - name: update pip3
    shell: pip3 install --upgrade pip && hash -d pip3
    tags: [patroni_install]

  - name:	update setuptools
    shell: pip3 install --upgrade setuptools
    tags: [patroni_install]

# уже не помню, почему отдельно. может и не нужно.
  - name: install pyyaml
    shell: pip3 install pyyaml
    tags: [patroni_install]

# вынесено из patroni с версии 2.1
  - name: install psycopg2-binary
    shell: pip3 install psycopg2-binary
    tags: [patroni_install]

  - name: install patroni
    shell: pip3 install patroni[{{ DCS }},aws]=={{ patroni_version }}
    tags: [patroni_install]

# где-то не работало с более новыми версиями. может и не нужно.
  - name: install kazoo==2.6.1
    shell: pip3 install -Iv kazoo==2.6.1
    tags: [patroni_install]

  when: psycopg_version == 2

- name: patroni installation (psycopg3)
  block:

  - name: update pip3
    shell: pip3 install --upgrade pip && hash -d pip3
    tags: [patroni_install]

  - name: update setuptools
    shell: pip3 install --upgrade setuptools
    tags: [patroni_install]

# уже не помню, почему отдельно. может и не нужно.
#  - name: install pyyaml
#    shell: pip3 install pyyaml
#    tags: [patroni_install]

# вынесено из patroni с версии 2.1
#  - name: install psycopg2-binary
#    shell: pip3 install psycopg2-binary
#    tags: [patroni_install]

  - name: install psycopg3
    shell: pip3 install psycopg[binary]>=3.0.0
    tags: [patroni_install]

  - name: install patroni
    shell: pip3 install patroni[{{ DCS }},aws]=={{ patroni_version }}
    tags: [patroni_install]

# где-то не работало с более новыми версиями. может и не нужно.
#  - name: install kazoo==2.6.1
#    shell: pip3 install -Iv kazoo==2.6.1
#    tags: [patroni_install]

  when: psycopg_version == 3

####################################################################################

- name: create dir /etc/patroni
  file:
    path: "/etc/patroni"
    state: directory
    owner: postgres
    group: postgres
    mode: 0700
  tags: [patroni_install]

# patroni.service нужно самим создать
- name: template config /lib/systemd/system/patroni.service
  template:
    src: patroni.service
    dest: /lib/systemd/system/patroni.service
  tags: [patroni_install]

- debug: msg="{{ ansible_distribution }}"
  tags: [patroni_install]

- name: cgroups config /lib/systemd/system/patroni.service
  command: sed -i '/^\[Service\]/a Delegate=cpu memory io' /lib/systemd/system/patroni.service
  when: postgresql_cgroups == true
  args:
    warn: no
  tags: [patroni_install]

- name: cgroups config /lib/systemd/system/patroni.service
  command: sed -i '/^\[Service\]/a Slice=pgcluster.slice' /lib/systemd/system/patroni.service
  when: postgresql_cgroups == true
  args:
    warn: no
  tags: [patroni_install]

####################################################################################

- name: Create a symbolic link /usr/bin/patroni
  file:
    src: '/usr/bin/patroni'
    dest: "/usr/local/bin/patroni"
    owner: root
    group: root
    mode: 0755
    state: link
  ignore_errors: true
  tags: [patroni_install]

# OracleLinux online
- name: Create a symbolic link /usr/bin/patroni
  file:
    src: "/usr/local/bin/patroni"
    dest: '/usr/bin/patroni'
    owner: root
    group: root
    mode: 0755
    state: link
  ignore_errors: true
  tags: [patroni_install]

####################################################################################

- name: Create a symbolic link /usr/bin/patronictl
  file:
    src: '/usr/bin/patronictl'
    dest: "/usr/local/bin/patronictl"
    owner: root
    group: root
    mode: 0755
    state: link
  ignore_errors: true
  tags: [patroni_install]

# OracleLinux online
- name: Create a symbolic link /usr/bin/patronictl
  file:
    src: "/usr/local/bin/patronictl"
    dest: '/usr/bin/patronictl'
    owner: root
    group: root
    mode: 0755
    state: link
  ignore_errors: true
  tags: [patroni_install]

- name: patronictl configure with zookeeper
  shell: /usr/bin/patronictl configure --config-file "${HOME:?}/.config/patroni/patronictl.yaml" --dcs "zookeeper://127.0.0.1:{{ zookeeper_clientPort }}" --namespace "/patroni"
  when: DCS == 'zookeeper'
  tags: [patroni_install]

- name: patronictl configure with etcd3
  shell: /usr/bin/patronictl configure --config-file "${HOME:?}/.config/patroni/patronictl.yaml" --dcs "etcd3://127.0.0.1:{{ ansible_etcd_client_port }}" --namespace "/patroni"
  when:	DCS == 'etcd3'
  tags: [patroni_install]

- name: template config ~/.config/patroni/patronictl.yaml      
  template:
    src: patronictl.yaml
    dest: ~/.config/patroni/patronictl.yaml      
  tags: [patroni_install]

- name: Notify SysLog | {{ playbook_dir | basename }} role={{ role_name }} inventory={{ inventory_file }} tag={{ ansible_run_tags }}
  shell: logger -t {{ hst.stdout }} "ansible playbook finished {{ playbook_dir }} role={{ role_name }} inventory={{ inventory_file }} tag={{ ansible_run_tags }}"
  tags: [patroni_install]
